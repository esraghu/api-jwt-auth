service: api-jwt-auth

custom:
  secrets: ${file(secrets.json)}

provider:
  name: google
  runtime: nodejs
  stage: dev
  project: my-project
  # the path to the credentials file needs to be absolute
  credentials: ~/.gcloud/keyfile.json
  environment:
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
    DB: ${self:custom.secrets.DB}

plugins:
  - serverless-google-cloudfunctions

# needs more granular excluding in production as only the serverless provider npm
# package should be excluded (and not the whole node_modules directory)
package:
  exclude:
    - node_modules/**
    - .gitignore
    - .git/**

functions:
  first:
    handler: http
    events:
      - http: path

  verify-token:
    handler: auth/VerifyToken.auth
    
  login:
    handler: auth/AuthHandler.login
    events:
      -http:
        path: login
        method: post
        cors: true
    
  register:
    handler: auth/AuthHandler.register
    events:
      -http:
        path: register
        method: post
        cors: true
    
  me:
    handler: auth/AuthHandler.me
    events:
      -http:
        path: me
        method: get
        cors: true
        authorizer: verify-token
    
  getUsers:
    handler: auth/AuthHandler.getUsers
    events:
      -http:
        path: getUsers
        method: get
        cors: true
  # NOTE: the following uses an "event" event (pubSub event in this case).
  # Please create the corresponding resources in the Google Cloud
  # before deploying this service through Serverless

  #second:
  #  handler: event
  #  events:
  #    - event:
  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish
  #        resource: projects/*/topics/my-topic

# you can define resources, templates etc. the same way you would in a
# Google Cloud deployment configuration
#resources:
#  resources:
#    - type: storage.v1.bucket
#      name: my-serverless-service-bucket
#  imports:
#    - path: my_template.jinja
